create new class library - dotnet new classlib -n {{className}}

add new class library to solution - dotnet sln add {{nameOfClassName}}

add dependancy of one project to another - 
1. go to project where you to add the dependancy (cd api for example).
2. add reference of class Infrastructure to api project - dotnet add reference ..\Infrastructure\ 
3. after applying references run dotnet restore

after making changes to classes and namespaces - dotnet restore, dotnet build

needs to be run in API folder:
dotnet watch run --no-hot-reload

ef - 
------
dotnet migrations ef add InitialCreate -o Data/Migrations
dotnet ef database update

drop db in Infrastructure project (-p Infrastructure) + telling ef where startup project is (-s API)
dotnet ef database drop -p Infrastructure -s API

remove migrations from Infrastructure project (-p Infrastructure) + telling ef where startup project is (-s API)
dotnet ef migrations remove -p Infrastructure -s API
dotnet ef migrations add InitialCreate -p Infrastructure -s API -o Data/Migrations

git - 
-------
intialize git - git init
set master branch name to main - git branch -m main
create git ignore file - dotnet new gitignore
connect to a remote repository - git remote add origin https://github.com/drgamss/angular_dotnet.git
push files to remote repository - git push -u origin main

swagger - 
https://localhost:5001/swagger/index.html
https://localhost:5001/swagger/v1/swagger.json

dotnet ef database update --connection "Data source=skinet.db"


todo - 
test that the pagination class is working and you understand the functionality before moving on.

